 static <T> void printSmart(ArrayList<T> items) {
        System.out.println("\t\t\t\t\t ***");
        // обходим в цикле элементы списка и для обозначения типа элементов
        // опять используем ранее объявленный параметр типа — T
        for (T item: items) {
            System.out.println("\t " + item);
        }

        Обратите внимание: хотя у метода printSmart() есть параметр типа, при вызове этот параметр никак не передаётся.
        Это происходит потому, что Java умеет определять значение параметра типа самостоятельно, исходя из типа аргумента.
        В конкретном случае, так как в метод printSmart() передаётся значение типа ArrayList<Guest>, компилятор автоматически определит значение типа T как Guest.

         параметром типа можно работать как с любым обычным типом данных. Например, можно использовать цикл for (T item: items),
         подразумевая, что каждый элемент в списке items будет иметь тип T. Можно использовать тип T в аргументах метода или создавать переменные этого типа.
         Но существуют ограничения:
        1) Нельзя создавать новые объекты типа T. Это связано с особенностями реализации параметров типа в Java. Запись вида new T() вызовет ошибку компиляции.
        2) Тип обязательно должен быть ссылочным. Нельзя использовать примитивные типы.


        Методы, которые содержат параметр типа, называют дженерик-методами, а весь механизм работы с параметрами типов — дженериками (англ. generics — «обобщения»).
        Дженерики в Java позволяют классу или методу одинаково или обобщённо работать со значениями различных типов. То есть вы пишете универсальный код,
         а Java самостоятельно подставляет нужный тип данных вместо имени параметра типа.
        Обобщать можно не только методы, но и целые классы. С некоторыми из таких параметризированных классов вы уже сталкивались.
         Например, ArrayList — обобщённый, или, другими словами, параметризованный класс. В контексте, принятом в Java, ArrayList — это дженерик.

С параметром типа можно работать как с любым обычным типом данных. Например, можно использовать цикл for (T item: items),
подразумевая, что каждый элемент в списке items будет иметь тип T. Можно использовать тип T в аргументах метода или создавать переменные этого типа.
 Но существуют ограничения:
Нельзя создавать новые объекты типа T. Это связано с особенностями реализации параметров типа в Java. Запись вида new T() вызовет ошибку компиляции.
Тип обязательно должен быть ссылочным. Нельзя использовать примитивные типы.
