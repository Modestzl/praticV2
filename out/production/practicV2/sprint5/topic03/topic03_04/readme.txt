Спринт 1/20: 4 → Тема 8/19: ООП. Абстракция и полиморфизм → Урок 4/8

https://practicum.yandex.ru/learn/java-developer/courses/f3f8cbf3-865d-4b16-9339-b55ac641633f/sprints/210720/topics/525d2e67-59cc-4efe-92b5-bdeb21ae6a47/lessons/d46d3c2a-77f6-4ca8-ae48-df304e2349d9/
https://practicum.yandex.ru/learn/java-developer/courses/f3f8cbf3-865d-4b16-9339-b55ac641633f/sprints/210720/topics/525d2e67-59cc-4efe-92b5-bdeb21ae6a47/lessons/6008edd3-88de-4825-b4c9-f07334d69fac/

В применении к языкам программирования полиморфизм означает способность кода,
например, одного и того же метода, одинаково работать с данными разных типов.

Как вы уже знаете, на основе интерфейса нельзя создавать объекты. Но можно объявить переменную с типом интерфейса и
 присвоить ей в качестве значения объект любого класса, который реализует этот интерфейс.

 Способность одинаково работать с объектами разного типа — лишь один из видов полиморфизма.

 В большинстве случаев выделяют три вида полиморфизма:
 Параметрический полиморфизм (от англ. parametric polymorphism).
 Полиморфизм подтипов (от англ. subtype polymorphism), или по-другому сабтайпинг (от англ. subtyping).
         Этот вид также называют полиморфизм включения (от англ inclusion polymorphism).
 Ad-hoc полиморфизм, или перегрузка (англ. overloading).

 Важно не путать сабтайпинг с наследованием. Тип int не наследует от float, следовательно, он не является его подклассом.
     Но float содержит и дробные, и целые числа, то есть он включает в себя значения типа int.
     Поэтому, с точки зрения системы типов, int — это подтип float.

 Подытожим. С точки зрения наследования, Teacher и Student — это подклассы Person. А с точки зрения полиморфизма, Teacher и Student — подтипы Person.
     Разница в том, что понятие типа данных и его подтипов более общее. Вы это увидели в первом примере, где вообще не использовались классы.
     Взаимосвязь тип-подтип распространяется и на использование интерфейсов. Все классы, которые реализуют какой-либо интерфейс, автоматически становятся его подтипами.

 Разберём этот пример. Метод printThis ожидает аргумент с типом данных Printable. Так как Printable — интерфейс, создать объект непосредственно этого типа нельзя.
     Такой метод был бы бессмысленным, если бы система типов Java не реализовывала сабтайпинг.
     Благодаря полиморфизму подтипов вместо объекта с типом Printable можно передать объект любого его подтипа. В нашем случае  — это объекты классов Book и Point.

